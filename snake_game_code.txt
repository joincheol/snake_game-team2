let s;
let scl = 20;
let food;
let imgS;
let imgF;
let imgB;
let slider;
playfield = 600;

function preload() {
  imgS =imgS = loadImage("https://raw.githubusercontent.com/joincheol/snake_game-team2/main/snake.jpg");
  imgF = loadImage("https://raw.githubusercontent.com/joincheol/snake_game-team2/main/prey.png");
  imgB = loadImage("https://raw.githubusercontent.com/joincheol/snake_game-team2/main/bomb.jpg")
}

function setup() {
  createCanvas(playfield, 640);
  background(51);
  s = new Snake();
  
  //속도 변경 슬라이드 생성
  slider = createSlider(5, 20, 10, 5);
  slider.position(280, 610);
  slider.style('width', '100px');
  pickLocation();
}

function draw() {
  //스코어가 1씩 증가할때마다 배경색 10씩 밝아지게 설정
  let num = s.score/3 * 10;
  background(51+num,51+num,51+num);
  
  //스코어가 1씩 증가할때마다 속도가증가
  let sF = s.score*1.0005;
  frameRate(slider.value()+sF);
  scoreboard();
 
  //뱀이 먹이먹으면 위치 랜덤 생성
  if (s.eat1(food)) {
    pickLocation();
  }

  s.death(); //뱀이 죽었는지 확인
  s.update(); //뱀 위치 업데이트
  s.show(); //뱀 화면에 그리기

  //먹이 화면에 그리고 이미지 삽입
  rect(food.x, food.y, scl, scl);
  image(imgF, food.x, food.y, scl, scl);
  
  fill(255,0,0)
  rect(bomb.x,bomb.y, scl, scl);
  image(imgB, bomb.x, bomb.y, scl, scl);
  if(s.eat2(bomb)){
    s.total = 0;
    s.score = 0;
    s.tail = [];
  }
}

function pickLocation() {                                
  let cols1 = floor(playfield/scl);                        
  let rows1 = floor(playfield/scl);
  
  // 먹이의 위치 생성
  food = createVector(floor(random(cols1)), floor(random(rows1)));
  food.mult(scl);
  
  // 폭탄의 위치 생성
  bomb = createVector(floor(random(cols1)), floor(random(rows1)));
  bomb.mult(scl);

  // 먹이와 폭탄의 위치가 겹치면 다시 생성
  while (food.x === bomb.x && food.y === bomb.y) {
    bomb.x = floor(random(cols1));
    bomb.y = floor(random(rows1));
    bomb.mult(scl);
  }

  // 먹이와 폭탄의 위치가 뱀의 몸통과 겹치지 않도록 함
  for (let i = 0; i < s.tail.length; i++) {
    let pos = s.tail[i];
    let d1 = dist(food.x, food.y, pos.x, pos.y);
    let d2 = dist(bomb.x, bomb.y, pos.x, pos.y);
    if (d1 < 1 || d2 < 1) {
      pickLocation();
    }
  }
}

//점수판
function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625);
  text("Speed: ", 220, 625)
  text(s.score, 70, 625);
  text(s.highscore, 540, 625);
}

//키보드 누름에 따른 위치 이동설정
function keyPressed() {
  if (keyCode === UP_ARROW) {
    s.dir(0, -1);
  } else if (keyCode === DOWN_ARROW) {
    s.dir(0, 1);
  } else if (keyCode === RIGHT_ARROW) {
    s.dir(1, 0);
  } else if (keyCode === LEFT_ARROW) {
    s.dir(-1, 0);
  }
}

//뱀 객체 생성 및 설정
function Snake() {
  this.x = 0;
  this.y = 0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 0;
  this.highscore = 0;

  //뱀의 이동방향 설정
  this.dir = function (x, y) {
    this.xspeed = x;
    this.yspeed = y;
  }

this.eat2 = function(pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {    
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
}
}
  
  this.eat1 = function(pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
    }
  }

//뱀이 죽었을때 초기화
  this.death = function () {
    for (let i = 0; i < this.tail.length; i++) {
      let pos = this.tail[i];
      let d = dist(this.x, this.y, pos.x, pos.y);

      if (d < 1) {
        this.total = 0;
        this.score = 0;
        this.tail = [];
      }
    }
  }

  //뱀의 음식 먹는거에 따른 머리와 꼬리 업데이트
  this.update = function () {
    if (this.total === this.tail.length) {
      for (let i = 0; i < this.tail.length - 1; i++) {
        this.tail[i] = this.tail[i + 1];
      }
    }
    this.tail[this.total - 1] = createVector(this.x, this.y);
    this.x = this.x + this.xspeed * scl;
    this.y = this.y + this.yspeed * scl;
    this.x = constrain(this.x, 0, playfield - scl);
    this.y = constrain(this.y, 0, playfield - scl);
  }

this.show = function () {
    image(imgS, this.x, this.y, scl, scl); // 이미지를 사용하여 뱀을 표시
    for (let i = 0; i < this.tail.length; i++) {
      image(imgS, this.tail[i].x, this.tail[i].y, scl, scl); // 꼬리도 이미지를 사용하여 표시
    }
  }
}